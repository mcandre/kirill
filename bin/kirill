#!/bin/bash
unset IFS
set -eufo pipefail

KIRILL_VERSION='0.0.2'

usage() {
    printf "$0 [OPTIONS] <directory> [<directory> [<directory> ...]]\n"
    printf "\n"
    printf -- "-print0\tDelimit file paths with null terminator\n"
    printf -- "-v\tShow version info\n"
    printf -- "-h\tShow usage menu\n"
}

banner() {
    printf "kirill $KIRILL_VERSION\n"
}

# Force UNIX find in case of Cygwin
BINARY=/usr/bin/find

JSON_FILE_PATTERNS='
*.eslintrc
*.jsfmtrc
*.jshintrc
*.jslintrc
*.json
'

EXCLUSION_PATTERNS='
.cicada
.git
.vscode
build
node_modules
settings.json
target
vendor
'

PRINT='-print'

main() {
    DIRS="$*"

    set --

    for EXCLUSION_PATTERN in $EXCLUSION_PATTERNS; do
        eval "set -- $* $EXCLUSION_PATTERN"
    done

    PARTS="\\( "

    while [ "$#" -gt 1 ]; do
        PARTS="${PARTS}-iname $1 -o "
        shift
    done

    PARTS="${PARTS}-iname $1 \\) -prune -o "

    set --

    for JSON_FILE_PATTERN in $JSON_FILE_PATTERNS; do
        eval "set -- $* $JSON_FILE_PATTERN"
    done

    PARTS="${PARTS}-type f \\( "

    while [ "$#" -gt 1 ]; do
        PARTS="${PARTS}-iname $1 -o "
        shift
    done

    PARTS="${PARTS}-iname $1 \\)"

    for DIR in $DIRS; do
        eval "$BINARY $DIR $PARTS $PRINT"
    done
}

while [ "$#" -gt 0 ]; do
    case "$1" in
    '-print0')
        PRINT='-print0'
        shift
        ;;
    '-v')
        shift
        banner
        exit
        ;;
    '-h')
        shift
        usage
        exit
        ;;
    *)
        break
        ;;
    esac
done

if [ "$#" -lt 1 ]; then
    usage
    exit 1
fi

DIRS="$*"

main "$DIRS"
